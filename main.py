#!/usr/bin/env python3
"""
Main orchestrator for the Automated Invoice Config Generator.

This script automates the two-step process of generating a configuration file
from an Excel invoice file.

1.  **Analyze Excel File**: It first calls the `analyze_excel.py` script to
    analyze the structure, fonts, and data layout of the input Excel file.
    This step produces a JSON file containing the analysis data.

2.  **Generate Configuration**: It then uses the generated analysis JSON file
    as input for the `generate_config_ascii.py` script. This second step
    takes the analysis data and a template configuration file to produce the
    final, ready-to-use invoice configuration file.

This orchestrator simplifies the end-to-end process into a single command,
handling the intermediate data flow and providing a unified command-line
interface.

Example Usage:
  - Generate a configuration from an Excel file with default settings:
    python main.py path/to/your/invoice.xlsx

  - Specify an output file for the final configuration:
    python main.py path/to/your/invoice.xlsx -o path/to/final_config.json

  - Use a custom template for configuration generation:
    python main.py path/to/your/invoice.xlsx -t path/to/custom_template.json

  - Keep the intermediate analysis file:
    python main.py path/to/your/invoice.xlsx --keep-intermediate

  - See detailed output from both scripts:
    python main.py path/to/your/invoice.xlsx -v
"""

import argparse
import subprocess
import sys
import os
import tempfile
from pathlib import Path

# Define the base directory of the project
BASE_DIR = Path(__file__).parent.resolve()

# Define paths to the scripts
ANALYZE_SCRIPT_PATH = BASE_DIR / "config_data_extractor" / "analyze_excel.py"
GENERATE_SCRIPT_PATH = BASE_DIR / "generate_config" / "generate_config_ascii.py"


def run_command(command, verbose=False):
    """
    Executes a command in a subprocess and handles output.

    Args:
        command (list): The command and its arguments to execute.
        verbose (bool): If True, print the command being executed.

    Returns:
        bool: True for success, False for failure.
    """
    if verbose:
        print(f"\n[ORCHESTRATOR] Running command: {' '.join(command)}")

    process = subprocess.Popen(
        command,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        encoding='utf-8'
    )

    stdout, stderr = process.communicate()

    if process.returncode != 0:
        print(f"\n--- Error executing: {' '.join(command)} ---", file=sys.stderr)
        if stdout:
            print("--- STDOUT ---", file=sys.stderr)
            print(stdout, file=sys.stderr)
        if stderr:
            print("--- STDERR ---", file=sys.stderr)
            print(stderr, file=sys.stderr)
        print("-------------------------------------------------", file=sys.stderr)
        return False

    if verbose and stdout:
        print(stdout)

    return True


def main():
    """Main function to orchestrate the analysis and generation process."""
    parser = argparse.ArgumentParser(
        description='Automated Invoice Configuration Generator.',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
This tool streamlines the process of creating an invoice configuration by:
1. Analyzing an Excel file to extract data positions and styles.
2. Generating a final configuration file based on the analysis and a template.
"""
    )

    # --- Arguments for the whole process ---
    parser.add_argument(
        'excel_file',
        help='Path to the input Excel file to be processed.'
    )
    parser.add_argument(
        '-o', '--output',
        help='Path for the final generated configuration file. (Default: {excel_file_name}_config.json)',
        metavar='FINAL_CONFIG_PATH'
    )
    parser.add_argument(
        '-t', '--template',
        default=BASE_DIR / "generate_config" / "sample_config.json",
        help='Path to the template configuration file for the generator. (Default: generate_config/sample_config.json)',
        metavar='TEMPLATE_PATH'
    )
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Enable verbose output to see detailed processing from all scripts.'
    )
    parser.add_argument(
        '--keep-intermediate',
        action='store_true',
        help='Keep the intermediate JSON file generated by the analysis step.'
    )

    args = parser.parse_args()

    # --- Step 1: Analyze the Excel File ---
    print("[ORCHESTRATOR] Step 1: Analyzing Excel file...")

    # Use a temporary file for the intermediate analysis result
    temp_analysis_file = tempfile.NamedTemporaryFile(
        mode='w',
        delete=False,
        suffix=".json",
        prefix="analysis_",
        dir="."
    ).name

    analysis_output_path = temp_analysis_file

    analyze_command = [
        sys.executable,
        str(ANALYZE_SCRIPT_PATH),
        args.excel_file,
        '--json',
        '--quantity-mode',
        '-o',
        analysis_output_path
    ]

    if not run_command(analyze_command, args.verbose):
        print("\n[ORCHESTRATOR] Failed during the Excel analysis step. Aborting.", file=sys.stderr)
        # Clean up the temporary file if the script fails
        if not args.keep_intermediate and os.path.exists(analysis_output_path):
            os.remove(analysis_output_path)
        sys.exit(1)

    print(f"[ORCHESTRATOR] Analysis complete. Intermediate data saved to: {analysis_output_path}")

    # --- Step 2: Generate the Configuration File ---
    print("\n[ORCHESTRATOR] Step 2: Generating final configuration file...")

    # Determine the final output path
    if args.output:
        final_output_path = args.output
    else:
        input_file_stem = Path(args.excel_file).stem
        final_output_path = f"{input_file_stem}_config.json"

    generate_command = [
        sys.executable,
        str(GENERATE_SCRIPT_PATH),
        analysis_output_path,
        '-t',
        str(args.template),
        '-o',
        final_output_path
    ]

    if args.verbose:
        generate_command.append('-v')

    if not run_command(generate_command, args.verbose):
        print("\n[ORCHESTRATOR] Failed during the configuration generation step. Aborting.", file=sys.stderr)
        if not args.keep_intermediate:
            os.remove(analysis_output_path)
        sys.exit(1)

    print("\n[ORCHESTRATOR] Process finished successfully!")
    print(f"âœ… Final configuration file generated at: {final_output_path}")

    # --- Step 3: Cleanup ---
    if not args.keep_intermediate:
        os.remove(analysis_output_path)
        if args.verbose:
            print(f"[ORCHESTRATOR] Cleaned up intermediate file: {analysis_output_path}")


if __name__ == "__main__":
    # Check if the required script files exist
    if not ANALYZE_SCRIPT_PATH.exists():
        print(f"Error: Analysis script not found at {ANALYZE_SCRIPT_PATH}", file=sys.stderr)
        sys.exit(1)
    if not GENERATE_SCRIPT_PATH.exists():
        print(f"Error: Generation script not found at {GENERATE_SCRIPT_PATH}", file=sys.stderr)
        sys.exit(1)

    main()